{"title":"软链接&硬链接","uid":"3256cb14c92d99ae1c7a0ab0e2019e03","slug":"linux/软链接&硬链接","date":"2021-03-15T10:32:47.000Z","updated":"2022-01-02T16:47:54.076Z","comments":true,"path":"api/articles/linux/软链接&硬链接.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/149821619272625_.pic_hd.4a5jn7gu5x40.jpg","content":"<h1 id=\"软链接-amp-硬链接\"><a href=\"#软链接-amp-硬链接\" class=\"headerlink\" title=\"软链接&amp;硬链接\"></a><strong>软链接&amp;硬链接</strong></h1><h2 id=\"什么是链接？\"><a href=\"#什么是链接？\" class=\"headerlink\" title=\"什么是链接？\"></a>什么是链接？</h2><p>链接简单说实际上是一种文件共享的方式，是 <strong>POSIX</strong> 中的概念，主流文件系统都支持链接文件。</p>\n<h2 id=\"inode\"><a href=\"#inode\" class=\"headerlink\" title=\"inode\"></a>inode</h2><p>**inode (index node)**是指在许多“类Unix文件系统”中的一种数据结构，用于描述文件系统对象（包括文件、目录、设备文件、socket、管道等）。每个inode保存了文件系统对象数据的属性和磁盘块位置。文件系统对象属性包含了各种元数据（如：最后修改时间） ，也包含用户组（owner ）和权限数据。</p>\n<p>POSIX标准强制规范了文件系统的行为。每个“文件系统对象”必须具有：</p>\n<ul>\n<li>以字节为单位表示的文件大小。</li>\n<li>设备ID，标识容纳该文件的设备。</li>\n<li>文件所有者的User ID。</li>\n<li>文件的Group ID</li>\n<li>文件的模式（mode），确定了文件的类型，以及它的所有者、它的group、其它用户访问此文件的权限。</li>\n<li>额外的系统与用户标志（flag），用来保护该文件。</li>\n<li>3个时间戳，记录了inode自身被修改（<code>ctime</code>, <em>inode change time</em>）、文件内容被修改（<code>mtime</code>, <em>modification time</em>）、最后一次访问（<code>atime</code>, <em>access time</em>）的时间。</li>\n<li>1个链接数，表示有多少个硬链接指向此inode。</li>\n<li>到文件系统存储位置的指针。通常是1K字节或者2K字节的存储容量为基本单位。</li>\n</ul>\n<h2 id=\"文件名与-inode\"><a href=\"#文件名与-inode\" class=\"headerlink\" title=\"文件名与 inode\"></a>文件名与 inode</h2><p> Linux 中文件名和文件数据（inode 节点）是分开存储与管理的，并通过特殊的方式建立联系，这种特殊的方式叫做目录项（directory entry 或 dentry）。目录文件（Linux 一切皆文件，目录也不例外）通过若干目录项记录着该目录下所有文件的信息。<strong>每个目录项由两部分组成：所包含文件的文件名，以及该文件名对应的 inode 号。</strong>目录项建立文件名与 inode 对应关系，从而实现「文件名 –&gt; inode –&gt; 数据块」的访问流程：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image.42zv5jfqcy20.png\" alt=\"img\"></p>\n<h2 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h2><p>所谓硬链接，就是上图第一个箭头，即<strong>文件名到 inode 的链接（目录项）</strong>。</p>\n<p><strong>Linux 下所有文件默认都会有一个硬链接，用来生成文件名（文件至少要有一个硬链接才能访问其内容）：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image-20210424213139887.449268bt3iw0.png\" alt=\"img\"></p>\n<h3 id=\"硬链接的创建\"><a href=\"#硬链接的创建\" class=\"headerlink\" title=\"硬链接的创建\"></a>硬链接的创建</h3><p>使用 <code>ln</code> 或 <code>ln -P</code> 命令创建一个硬链接，格式 <code>ln [-P] 源文件 目标文件</code>。下面为 <code>test.txt</code> 文件创建一个硬链接 <code>test-hd.txt</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image-20210424213600050.1kyq4l18xn6o.png\" alt=\"img\"></p>\n<p>可以看到两个文件的文件的类型、大小一致，重点在于 inode 号是相同的,创建链接后两个文件的链接数变为 2，表示可以通过 2 个名字都访问到同一个 inode 下相同的数据块</p>\n<h2 id=\"软连接（Linux-中的「快捷方式」）\"><a href=\"#软连接（Linux-中的「快捷方式」）\" class=\"headerlink\" title=\"软连接（Linux 中的「快捷方式」）\"></a>软连接（Linux 中的「快捷方式」）</h2><p>软链接（soft link）又称符号链接（symbolic link 或 symlink），软链接与硬链接不同，若文件用户的数据块中存放的内容是另一文件的路径名的文本指向，则该文件就是软连接。</p>\n<p>将内容写进符号链接里，那这些内容也会同样写入引用文件。而当删除一个符号链接的时候，删除的只是符号链接而没有删除文件本身。而如果先删除了文件，该链接依旧存在，却不会指向任何文件。但是你打开该链接，就会报错“NO such file or directory”</p>\n<h3 id=\"软链接的创建\"><a href=\"#软链接的创建\" class=\"headerlink\" title=\"软链接的创建\"></a>软链接的创建</h3><p>使用 <code>ln -s</code> 命令创建一个软链接，格式 <code>ln -s 源文件 目标文件</code>。下面为 <code>test.txt</code> 文件创建一个软链接 <code>test-soft.txt</code>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image-20210424214218105.7gzr4ynfvdc0.png\" alt=\"img\"></p>\n<p>两个文件的类型、大小一目了然，inode 号不同说明这是两个不同的文件，创建软链接并不会增加文件的链接数（上图命令行中所有文件链接数均为 1），软链接并不会直接访问 inode，仅仅指向目标数据的文件名。</p>\n<h2 id=\"软硬区别\"><a href=\"#软硬区别\" class=\"headerlink\" title=\"软硬区别\"></a>软硬区别</h2><p>1.硬链接不能引用自身文件系统之外的文件。也就是说，链接不能引用与该链接不在同一磁盘分区的文件。</p>\n<p>2.硬链接不能引用目录。软链接即可以是文件也可以是目录。</p>\n","feature":null,"text":"软链接&amp;硬链接什么是链接？链接简单说实际上是一种文件共享的方式，是 POSIX 中的概念，主流文件系统都支持链接文件。 inode**inode (index node)**是指在许多“类Unix文件系统”中的一种数据结构，用于描述文件系统对象（包括文件、目录、设备文件、...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":14,"path":"api/categories/学习记录.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E9%93%BE%E6%8E%A5-amp-%E7%A1%AC%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">软链接&amp;硬链接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%93%BE%E6%8E%A5%EF%BC%9F\"><span class=\"toc-text\">什么是链接？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#inode\"><span class=\"toc-text\">inode</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%8E-inode\"><span class=\"toc-text\">文件名与 inode</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">硬链接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">硬链接的创建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E8%BF%9E%E6%8E%A5%EF%BC%88Linux-%E4%B8%AD%E7%9A%84%E3%80%8C%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E3%80%8D%EF%BC%89\"><span class=\"toc-text\">软连接（Linux 中的「快捷方式」）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E9%93%BE%E6%8E%A5%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">软链接的创建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E7%A1%AC%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">软硬区别</span></a></li></ol></li></ol>","author":{"name":"Polnareff","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image123.47oj8cvm3fu0.jpg","link":"/","description":"Travel around in search of her sister's killer","socials":{"github":"https://github.com/jp-polnareff","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":""}},"mapped":true,"prev_post":{"title":"Pulsar之message篇","uid":"55ea1ac8b6eebb4c3c1010cae15373f5","slug":"mq/pulsar_message","date":"2021-04-06T10:32:47.000Z","updated":"2022-01-02T16:47:54.080Z","comments":true,"path":"api/articles/mq/pulsar_message.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image.4caxs5p9qou0.png","text":"Pulsar之message篇Pulsar建立在pub-sub上，该设计模式中，producer 发布消息到 topic， Consumer 订阅 topic、处理发布的消息，并在处理完成后发送确认。 一旦创建订阅，即使 consumer 断开连接，Pulsar 仍然可以保存所有...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":14,"path":"api/categories/学习记录.json"}],"tags":[{"name":"Pulsar","slug":"Pulsar","count":2,"path":"api/tags/Pulsar.json"}],"author":{"name":"Polnareff","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image123.47oj8cvm3fu0.jpg","link":"/","description":"Travel around in search of her sister's killer","socials":{"github":"https://github.com/jp-polnareff","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":""}}},"next_post":{"title":"Pulsar简介","uid":"6d776fe044c383329f434d8d6568a06a","slug":"mq/pulsar","date":"2021-03-15T10:32:47.000Z","updated":"2022-01-02T16:47:54.079Z","comments":true,"path":"api/articles/mq/pulsar.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image.69iyp6kailo0.png","text":"Pulsar简介Apache Pulsar 是灵活的发布-订阅消息系统（Flexible Pub/Sub messaging），采用分层分片架构。 特性： 线性扩展。能够丝滑的扩容到成百上千个节点(Kafka扩容需要占用很多系统资源在节点间拷贝数据，而Plusar完全不用) 高吞...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":14,"path":"api/categories/学习记录.json"}],"tags":[{"name":"Pulsar","slug":"Pulsar","count":2,"path":"api/tags/Pulsar.json"}],"author":{"name":"Polnareff","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image123.47oj8cvm3fu0.jpg","link":"/","description":"Travel around in search of her sister's killer","socials":{"github":"https://github.com/jp-polnareff","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":""}}}}