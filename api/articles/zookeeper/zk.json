{"title":"ZooKeeper：分布式协调服务","uid":"ea4f29ef076f8fcb5cf3c8e4ef9a996f","slug":"zookeeper/zk","date":"2020-10-05T10:32:47.000Z","updated":"2022-01-02T16:47:54.095Z","comments":true,"path":"api/articles/zookeeper/zk.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image.6sh7yd2sglk0.png","content":"<h1 id=\"ZooKeeper：分布式协调服务\"><a href=\"#ZooKeeper：分布式协调服务\" class=\"headerlink\" title=\"ZooKeeper：分布式协调服务\"></a>ZooKeeper：分布式协调服务</h1><p>统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>\n<h2 id=\"ZooKeeper提供的名称空间与标准文件系统的名称空间非常相似\"><a href=\"#ZooKeeper提供的名称空间与标准文件系统的名称空间非常相似\" class=\"headerlink\" title=\"ZooKeeper提供的名称空间与标准文件系统的名称空间非常相似\"></a>ZooKeeper提供的名称空间与标准文件系统的名称空间非常相似</h2><p><img src=\"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image-20210104183059020.4o69sqdao5u0.png\" alt=\"img\"></p>\n<span id=\"more\"></span>\n<p>其中每个节点称为znode</p>\n<ol>\n<li>持久节点</li>\n<li>临时节点<ul>\n<li>会话关闭消失</li>\n</ul>\n</li>\n<li>顺序节点<ul>\n<li>zk都会在路径后面自动添加上10位的数字</li>\n</ul>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">节点信息对应\ncZxid            创建节点时的事务id   \nctime            创建节点的时\nmZxid            更新节点时的事务id(如未做修改，创建事务的id和更新事务的id是一样的)\nmtime            修改节点的时间\npZxid            当前节点下的子节点列表里面，最后一次被修改的时候的事务id (只有子节点变更以后，pZxid才会变化)\ncversion         当前节点的子节点版本号\ndataVersion      当前数据内容的版本号(修改内容会变)\naclVersion       当前节点acl(权限）变更的版本号\nephemeralOwner   会话信息(会话信息，创建临时节点才会有的。当前客户端连接到ZooKeeper服务，会产生一个会话，会话和服务端建立后，会产生一个标志。基于这个标志，才能知道当前会话结束后，应该把哪些节点删除。是当前会话的一个标志)\ndataLength       当前节点内容的长度 \nnumChildren      子节点的数量 </code></pre>\n\n<h2 id=\"ZooKeeper-Watches\"><a href=\"#ZooKeeper-Watches\" class=\"headerlink\" title=\"ZooKeeper Watches\"></a>ZooKeeper Watches</h2><p>watch事件是一次触发，发送给设置了watch的客户端，该事件在设置watch的数据发生更改时发生，特性：</p>\n<ol>\n<li>数据更改后一次性触发（触发后就移除）<ul>\n<li>3.6.0后可以设置永久的，递归的watch，在被触发时不会被删除，并且会以递归方式触发已注册znode以及所有子znode的更改</li>\n</ul>\n</li>\n<li>客户端串行执行<ul>\n<li>watcher回调的过程是一个串行同步的过程，这为我们保证了顺序</li>\n</ul>\n</li>\n<li>轻量级设计<ul>\n<li>WatcherEvent是Zookeeper整个Watcher通知机制的最小通知单元。整个单元结构只包含三部分：通知状态，事件类型和节点路径。事件的具体内容需要客户端主动获取</li>\n</ul>\n</li>\n</ol>\n<p>注册通知流程图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image-20210105142657665.6as99hcatp80.png\" alt=\"img\"></p>\n<h5 id=\"WatchManager类\"><a href=\"#WatchManager类\" class=\"headerlink\" title=\"WatchManager类\"></a>WatchManager类</h5><p>客户端在向 ZooKeeper 服务器注册 Watcher 的同时，会将 Watcher 对象存储在客户端的 WatchManager 中，事件触发后，会向客户端发送通知，客户端线程从 WatchManager 中取出对应的 Watcher 对象来执行回调逻辑</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private final HashMap&lt;String, HashSet&lt;Watcher&gt;&gt; watchTable &#x3D;\n new HashMap&lt;String, HashSet&lt;Watcher&gt;&gt;();\npublic synchronized void addWatch(String path, Watcher watcher) &#123;\n HashSet&lt;Watcher&gt; list &#x3D; watchTable.get(path);\n if (list &#x3D;&#x3D; null) &#123;\n &#x2F;&#x2F; don&#39;t waste memory if there are few watches on a node\n &#x2F;&#x2F; rehash when the 4th entry is added, doubling size thereafter\n &#x2F;&#x2F; seems like a good compromise\n list &#x3D; new HashSet&lt;Watcher&gt;(4);\n watchTable.put(path, list);\n &#125;\n list.add(watcher);\n\n HashSet&lt;String&gt; paths &#x3D; watch2Paths.get(watcher);\n if (paths &#x3D;&#x3D; null) &#123;\n &#x2F;&#x2F; cnxns typically have many watches, so use default cap here\n paths &#x3D; new HashSet&lt;String&gt;();\n watch2Paths.put(watcher, paths);\n &#125;\n paths.add(path);\n&#125;</code></pre>\n\n<h5 id=\"Watcher-接口\"><a href=\"#Watcher-接口\" class=\"headerlink\" title=\"Watcher 接口\"></a>Watcher 接口</h5><p>process 方法是 Watcher 接口中的一个回调方法，当 ZooKeeper 向客户端发送一个 Watcher 事件通知时，客户端就会对相应的 process 方法进行回调，从而实现对事件的处理。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public interface Watcher &#123;\nabstract public void process(WatchedEvent event);\n&#125;\n&#x2F;&#x2F;WatchedEvent 包含了每一个事件的三个基本属性：通知状态（KeeperState）、事件类型（EventType）和节点路径（Path）</code></pre>\n\n<h2 id=\"Zab（-ZooKeeper-Atomic-Broadcast）协议\"><a href=\"#Zab（-ZooKeeper-Atomic-Broadcast）协议\" class=\"headerlink\" title=\"Zab（ ZooKeeper Atomic Broadcast）协议\"></a>Zab（ ZooKeeper Atomic Broadcast）协议</h2><h3 id=\"原子广播\"><a href=\"#原子广播\" class=\"headerlink\" title=\"原子广播\"></a>原子广播</h3><p><img src=\"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image-20210113113737725.10gce2m3zhn4.png\" alt=\"img\"></p>\n<ol>\n<li>写请求到leader</li>\n<li>leader会开启事务-&gt;写操作-&gt;生成proposal发给所有的follower的FIFO队列</li>\n<li>follower接收到proposal-&gt;开启事务-&gt;写操作-&gt;ack</li>\n<li>leader收到ack过半-&gt;提交事务-&gt;发送commit给所有follower</li>\n<li>follower提交事务</li>\n</ol>\n<h3 id=\"崩溃恢复\"><a href=\"#崩溃恢复\" class=\"headerlink\" title=\"崩溃恢复\"></a>崩溃恢复</h3><p>Zxid：xid 是一个 64 位的数字，其中低 32 位是一个递增的计数器，高32位epoch</p>\n<p>epoch：每次选主后会+1</p>\n<p>恢复选主原则：</p>\n<p>1）Follower具备最高的zxid<br>2）票数过半</p>\n<p>选出leader后，Leader 服务器会根据自己最后被提交的 ZXID 和 Follower 上的 ZXID 进行比对，然后回滚或同步。</p>\n<p>日志同步数据</p>\n<ol>\n<li>Leader发送同步日志给Follower，该过程传输的主要是日志数据流或者Leader给Follower的各种命令；</li>\n<li>Leader发送NEWLEADER命令给Follower，该命令的作用应该是告诉Follower日志同步已经完成，Follower对该NEWLEADER作出ACK，而Leader会等待该ACK消息；</li>\n<li>Leader最后发送UPTODATE命令至Follower，这个命令的作用应该是告诉Follower，我已经收到了你的ACK，而Follower这边收到该消息的时候说明一切与Leader同步的初始化工作都已经完成，可以进入正常的处理流程了，而Leader这边发完该命令后也可以进入正常的请求处理流程了。</li>\n</ol>\n<p>raft动画演示网站：<a href=\"http://thesecretlivesofdata.com/raft/\">http://thesecretlivesofdata.com/raft/</a> </p>\n<p>raft动画演示网站 <a href=\"https://raft.github.io/\">https://raft.github.io/</a> </p>\n<p>ZooKeeper Internals <a href=\"https://zookeeper.apache.org/doc/r3.5.0-alpha/zookeeperInternals.html\">https://zookeeper.apache.org/doc/r3.5.0-alpha/zookeeperInternals.html</a> </p>\n","feature":null,"text":"ZooKeeper：分布式协调服务统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。 ZooKeeper提供的名称空间与标准文件系统的名称空间非常相似 其中每个节点称为znode 持久节点 临时节点 会话关闭消失 顺序节点 zk都会在路径后面自动添加上10位的数字 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":14,"path":"api/categories/学习记录.json"}],"tags":[{"name":"Zookeeper","slug":"Zookeeper","count":1,"path":"api/tags/Zookeeper.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ZooKeeper%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">ZooKeeper：分布式协调服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ZooKeeper%E6%8F%90%E4%BE%9B%E7%9A%84%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E6%A0%87%E5%87%86%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E9%9D%9E%E5%B8%B8%E7%9B%B8%E4%BC%BC\"><span class=\"toc-text\">ZooKeeper提供的名称空间与标准文件系统的名称空间非常相似</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ZooKeeper-Watches\"><span class=\"toc-text\">ZooKeeper Watches</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#WatchManager%E7%B1%BB\"><span class=\"toc-text\">WatchManager类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Watcher-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Watcher 接口</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Zab%EF%BC%88-ZooKeeper-Atomic-Broadcast%EF%BC%89%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">Zab（ ZooKeeper Atomic Broadcast）协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%AD%90%E5%B9%BF%E6%92%AD\"><span class=\"toc-text\">原子广播</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B4%A9%E6%BA%83%E6%81%A2%E5%A4%8D\"><span class=\"toc-text\">崩溃恢复</span></a></li></ol></li></ol></li></ol>","author":{"name":"Polnareff","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image123.47oj8cvm3fu0.jpg","link":"/","description":"Travel around in search of her sister's killer","socials":{"github":"https://github.com/jp-polnareff","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5254061686","zhihu":"","csdn":"","juejin":""}},"mapped":true,"prev_post":{"title":"Trojan搭建","uid":"f1f87b7aa7ff4eb8772e03523d7680ea","slug":"vps/Trojan一键安装脚本","date":"2021-02-20T10:32:47.000Z","updated":"2022-01-02T16:47:54.093Z","comments":true,"path":"api/articles/vps/Trojan一键安装脚本.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image.269gql6oa2cg.png","text":"Trojan搭建服务端前期准备 系统centos7 /debian9 /ubuntu16以上 域名解析到VPS并生效 一键脚本代码此脚本感谢 atrandys Github项目地址：https://github.com/atrandys/trojan 安装好curl，若是有此环境...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"教程","slug":"教程","count":3,"path":"api/categories/教程.json"}],"tags":[{"name":"vps","slug":"vps","count":1,"path":"api/tags/vps.json"}],"author":{"name":"Polnareff","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image123.47oj8cvm3fu0.jpg","link":"/","description":"Travel around in search of her sister's killer","socials":{"github":"https://github.com/jp-polnareff","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5254061686","zhihu":"","csdn":"","juejin":""}}},"next_post":{"title":"SDS 简单动态字符串","uid":"dd327c2a75c4b810517d5dca0d9f2612","slug":"redis/sds","date":"2020-08-12T10:32:47.000Z","updated":"2022-01-02T16:47:54.089Z","comments":true,"path":"api/articles/redis/sds.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/148881619190256_.pic_hd.2uocrn36h4g0.jpg","text":"SDS 简单动态字符串（simple dynamic string）Redis 没有直接使用C语言传统的字符串表示，而是自己构建了一种名为简单动态字符串（simple dynamic string SDS）的抽象类型，并将SDS用作Redis 的默认字符串表示。 SDS定义str...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":14,"path":"api/categories/学习记录.json"}],"tags":[{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"}],"author":{"name":"Polnareff","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/jp-polnareff/image-hosting@master/20210423/image123.47oj8cvm3fu0.jpg","link":"/","description":"Travel around in search of her sister's killer","socials":{"github":"https://github.com/jp-polnareff","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5254061686","zhihu":"","csdn":"","juejin":""}}}}